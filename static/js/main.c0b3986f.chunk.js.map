{"version":3,"sources":["wheel.js","EditableWheelItem.js","ListEditingControls.js","ListColumn.js","App.js","serviceWorker.js","index.js"],"names":["Wheel","props","useState","undefined","selectedItemIdx","setSelectedItemIdx","spinning","useRef","numTotalSpins","selectedName","reset","current","popUpWinningModal","selectItem","items","length","popUpSassyModal","selectedIdx","Math","floor","random","console","log","setSelectedForQA","setTimeout","SECONDS_TO_SPIN","wheelVars","className","style","onClick","map","item","index","key","type","EditableWheelItem","value","idx","changeItemContent","functionForEditingList","onChange","e","target","ListEditingControls","columnTitle","listIsEditable","toggleEditableList","addingAnItemToTheList","removingAnItemFromTheList","title","display","background","marginLeft","ListColumn","addItemToList","removeItemFromList","allItems","droppableId","setListIsEditable","provided","snapshot","ref","innerRef","isDraggingOver","padding","width","overflow","whiteSpace","textOverflow","content","id","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","placeholder","App","teamMembers","setTeamMembers","availableForQA","setAvailableForQA","selectedForQA","foundWinner","setFoundWinner","setTitle","titleCanChange","setTitleCanChange","id2List","wheelItems","getList","closeIt","toggleTitleEditable","curTitleEditable","curTeamMembers","curTeamMembersCpy","slice","flexClass","open","onBlur","onKeyDown","keyCode","onDragEnd","result","source","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","droppableSource","droppableDestination","sourceClone","destClone","move","teamMember","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0b3986f.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './wheel.css';\n\nconst Wheel = (props) => {\n    const [selectedItemIdx, setSelectedItemIdx] = useState(undefined);\n    const spinning = useRef('');\n    const numTotalSpins = useRef(5);\n    const selectedName = useRef('');\n\n    const SECONDS_TO_SPIN = 6;\n\n    const reset = () => {\n        spinning.current = ('');\n        props.popUpWinningModal(selectedName.current);\n    }\n\n    const selectItem = () => {\n        if(props.items.length < 1){\n            props.popUpSassyModal();\n            return;\n        }\n        spinning.current = 'spinning';\n        const selectedIdx = Math.floor(Math.random() * props.items.length);\n        console.log(`selectedIdx: ${selectedIdx}`);\n        props.setSelectedForQA(props.items[selectedIdx]);\n        selectedName.current = props.items[selectedIdx];\n        setSelectedItemIdx(selectedIdx);\n        setTimeout(reset, SECONDS_TO_SPIN * 1000 * 1.001);\n    }\n\n    const { items } = props;\n\n    const wheelVars = {\n        '--nb-item': items.length > 0 ? items.length : 1,\n        '--selected-item': selectedItemIdx,\n        '--nb-turn': numTotalSpins.current,\n        '--spinning-duration': `${SECONDS_TO_SPIN}s`,\n    };\n\n\n    return (\n        <div className=\"wheel-container\">\n            <div className={`wheel ${spinning.current}`} style={wheelVars} onClick={selectItem}>\n                {items.map((item, index) => (\n                    <div className=\"wheel-item\" key={index} style={{ '--item-nb': index }}>\n                        {item}\n                    </div>\n                ))}\n            </div>\n            <div className=\"buttonContainer\">\n                <button type='button' onClick={selectItem} className='spinItButton'>Spin It!</button>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Wheel;","import React from 'react';\n\nconst EditableWheelItem = ({ value, idx, changeItemContent,functionForEditingList }) => {\n    \n    const changeTheValue = (e) => {\n        changeItemContent(e.target.value, idx,functionForEditingList);\n    }\n\n    return (\n        <input type='text' value={value} onChange={changeTheValue} />\n    );\n}\n\nexport default EditableWheelItem;","import React, { useState } from 'react';\n\nconst ListEditingControls = ({\n    columnTitle,\n    listIsEditable,\n    toggleEditableList,\n    addingAnItemToTheList,\n    removingAnItemFromTheList, }) => {\n\n    const [title, setTitle] = useState(columnTitle);\n\n    return (\n        <h2>{title}\n            <button type='button' style={{ display: listIsEditable ? 'none' : '' }} onClick={toggleEditableList}>\n                {listIsEditable ? '' : 'Edit List'}\n            </button>\n            {(listIsEditable === true) &&\n                <div>\n                    <button type='button' onClick={addingAnItemToTheList}>Add Item</button>\n                    <button type='button' onClick={removingAnItemFromTheList}>Remove Item</button>\n                    <button type='button'\n                        onClick={toggleEditableList}\n                        style={{ background: 'skyblue', marginLeft: '15px' }}\n                    >\n                        Done Editing\n    </button>\n                </div>\n            }\n        </h2>\n    );\n}\n\nexport default ListEditingControls;","import React, { useState } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport './App.css';\nimport EditableWheelItem from './EditableWheelItem';\nimport './ListColumn.css';\nimport ListEditingControls from './ListEditingControls';\n\nconst ListColumn = ({\n    columnTitle,\n    addItemToList,\n    removeItemFromList,\n    allItems,\n    changeItemContent,\n    droppableId,\n    functionForEditingList }) => {\n\n    const [listIsEditable, setListIsEditable] = useState(false);\n\n    const grid = 8;\n\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n        userSelect: 'none',\n        padding: grid * 2,\n        margin: `0 0 ${grid}px 0`,\n\n        // change background colour if dragging\n        background: isDragging ? 'aquamarine' : 'turquoise',\n\n        // styles we need to apply on draggables\n        ...draggableStyle\n    });\n\n    const toggleEditableList = () => {\n        setListIsEditable(!listIsEditable);\n    }\n\n    const addingAnItemToTheList = () => {\n        addItemToList(functionForEditingList);\n    }\n\n    const removingAnItemFromTheList = () => {\n        removeItemFromList(functionForEditingList);\n    }\n\n    const getListStyle = isDraggingOver => ({\n        background: isDraggingOver ? 'lightblue' : 'lightgrey',\n        padding: grid,\n        width: 250,\n        overflow: 'hidden',\n        whiteSpace: 'no-wrap',\n        textOverflow: 'ellipsis',\n    });\n\n    return (\n        <div className='columnsOfNames'>\n            <ListEditingControls\n                columnTitle={columnTitle}\n                listIsEditable={listIsEditable}\n                toggleEditableList={toggleEditableList}\n                addingAnItemToTheList={addingAnItemToTheList}\n                removingAnItemFromTheList={removingAnItemFromTheList}\n            />\n            <div>\n                <Droppable droppableId={droppableId}>\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {allItems.map((item, index) => (\n                                listIsEditable ?\n                                    <EditableWheelItem\n                                        key={index}\n                                        value={item.content}\n                                        changeItemContent={changeItemContent}\n                                        idx={index}\n                                        functionForEditingList={functionForEditingList}\n                                    />\n                                    :\n                                    <Draggable\n                                        key={item.id}\n                                        draggableId={item.id}\n                                        index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}>\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </div>\n        </div>\n    );\n}\n\nexport default ListColumn;","import React, { useState, useRef } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport './App.css';\nimport Wheel from './wheel';\nimport ListColumn from './ListColumn';\n\nconst getItems = () => {\n  return [\n    {\n      id: 'Mariam',\n      content: 'Mariam'\n    },\n    {\n      id: 'Josses',\n      content: 'Josses'\n    },\n    {\n      id: 'Jide',\n      content: 'Jide'\n    },\n    {\n      id: 'Kartik',\n      content: 'Kartik'\n    },\n    {\n      id: 'Matt',\n      content: 'Matt'\n    },\n    {\n      id: 'David',\n      content: 'David'\n    },\n    {\n      id: 'Garret',\n      content: 'Garret'\n    },\n    {\n      id: 'Deb',\n      content: 'Deb'\n    },\n  ];\n}\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\n\nconst App = () => {\n  const [teamMembers, setTeamMembers] = useState(getItems());\n  const [availableForQA, setAvailableForQA] = useState([]);\n  const [selectedForQA, setSelectedForQA] = useState('');\n  const [foundWinner, setFoundWinner] = useState(false);\n  const [title, setTitle] = useState('Wheel of QA!');\n  const [titleCanChange, setTitleCanChange] = useState(false);\n\n  const popUpWinningModal = () => {\n    setFoundWinner(true);\n  }\n\n  const popUpSassyModal = () => {\n    setFoundWinner(true);\n  }\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  const id2List = {\n    wheelItems: availableForQA,\n    allItems: teamMembers,\n  };\n\n  const getList = id => id2List[id];\n\n  const onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    // reordering items in the same list\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      if (source.droppableId === 'allItems') {\n        setTeamMembers(items)\n      }\n      else {\n        setAvailableForQA(items);\n      }\n\n    } else {\n      const result = move(\n        getList(source.droppableId),\n        getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      setAvailableForQA(result.wheelItems);\n      setTeamMembers(result.allItems);\n    }\n  };\n\n\n  const closeIt = () => {\n    setFoundWinner(false);\n  }\n\n  const toggleTitleEditable = () => {\n    setTitleCanChange(curTitleEditable => {\n      return !curTitleEditable;\n    });\n  }\n\n  const checkForEnter = (e) => {\n    if (e.keyCode == 13) {\n      toggleTitleEditable();\n    }\n  }\n\n  const changeTitle = (e) => {\n    setTitle(e.target.value);\n  }\n\n  const changeItemContent = (value, idx, functionForEditingList) => {\n    functionForEditingList(curTeamMembers => {\n      const curTeamMembersCpy = curTeamMembers.slice();\n      curTeamMembersCpy[idx] = { id: value, content: value };\n      return curTeamMembersCpy;\n    });\n  }\n\n  const addItemToList = (functionForEditingList) => {\n    functionForEditingList(curTeamMembers => {\n      return [...curTeamMembers, { id: '', content: '' }]\n    })\n  }\n\n  const removeItemFromList = (functionForEditingList) => {\n    functionForEditingList(curTeamMembers => {\n      let removedCurTeamMembersCpy = curTeamMembers.slice(0, curTeamMembers.length - 1);\n      return removedCurTeamMembersCpy;\n    })\n  }\n\n  // What was this supposed to do? When would I not want it to be displayed with flex?\n  const flexClass = foundWinner ? 'displayFlex' : '';\n\n  return (\n    <div className=\"App\">\n      {availableForQA.length > 0 ?\n        <dialog\n          className={`announceTheWinner ${flexClass}`}\n          open={foundWinner}\n          onClick={closeIt}\n        >\n          <div className='announce'>The Winner is </div>\n          <div className='nameOfWinner'>{selectedForQA}</div>\n        </dialog>\n        :\n        <dialog\n          className={`announceTheWinner ${flexClass}`}\n          open={foundWinner}\n          onClick={closeIt}\n        >\n          <div className='sassy-announce'>\n            Well look at\n            <div className='sassy-nameOfWinner'>CAPTAIN QA</div>\n            over here!\n            <br />Spinner of Wheels and Finder of Bugs!\n            <br />You spun it, now you've WON it\n          </div>\n          <div>And while you're at it, please fix my bugs at https://github.com/davidlynch2000/WheelOfQA</div>\n        </dialog>\n\n      }\n\n      <div className=\"headerBanner\">\n        {titleCanChange ?\n          <input\n            className='headerBanner'\n            type='text'\n            value={title}\n            onChange={changeTitle}\n            onBlur={toggleTitleEditable}\n            onKeyDown={checkForEnter}\n          />\n          :\n          <h1 onClick={toggleTitleEditable}>{title}</h1>\n        }\n      </div>\n\n      <div className='pageContainer'>\n        <DragDropContext onDragEnd={onDragEnd} className='DAndD'>\n          <ListColumn\n            columnTitle='Team Members'\n            addItemToList={addItemToList}\n            removeItemFromList={removeItemFromList}\n            changeItemContent={changeItemContent}\n            allItems={teamMembers}\n            droppableId='allItems'\n            functionForEditingList={setTeamMembers}\n          />\n\n          <ListColumn\n            columnTitle='Available For QA'\n            addItemToList={addItemToList}\n            removeItemFromList={removeItemFromList}\n            changeItemContent={changeItemContent}\n            allItems={availableForQA}\n            droppableId='wheelItems'\n            functionForEditingList={setAvailableForQA}\n          />\n\n        </DragDropContext>\n\n        <Wheel\n          items={availableForQA.map(teamMember => teamMember.id)}\n          setSelectedForQA={setSelectedForQA}\n          popUpWinningModal={popUpWinningModal}\n          popUpSassyModal={popUpSassyModal}\n        />\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}