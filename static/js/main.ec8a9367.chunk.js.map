{"version":3,"sources":["wheel.js","EditableWheelItem.js","ListEditingControls.js","ListColumn.js","WinningAnnouncement.js","customMainUtils.js","App.js","serviceWorker.js","index.js"],"names":["Wheel","items","popUpWinningModal","popUpSassyModal","setSelectedForQA","useState","undefined","selectedItemIdx","setSelectedItemIdx","spinning","useRef","selectedName","reset","current","selectItem","length","selectedIdx","Math","floor","random","console","log","setTimeout","SECONDS_TO_SPIN","wheelVars","className","style","onClick","map","item","index","key","type","EditableWheelItem","value","idx","changeItemContent","functionForEditingList","onChange","e","target","ListEditingControls","title","listIsEditable","toggleEditableList","addingAnItemToTheList","removingAnItemFromTheList","changeTitle","editTitle","setEditTitle","toggleEditTitle","autoFocus","onBlur","onKeyDown","keyCode","display","background","marginLeft","ListColumn","columnTitle","addItemToList","removeItemFromList","allItems","droppableId","setListIsEditable","setTitle","provided","snapshot","ref","innerRef","isDraggingOver","padding","width","overflow","whiteSpace","textOverflow","content","id","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","placeholder","WinningAnnouncement","availableForQA","foundWinner","closeIt","selectedForQA","wrapperRef","handleClickOutside","event","contains","useEffect","document","addEventListener","removeEventListener","useClickOutsideCloser","flexClass","animationForWinningName","allAnimations","pickAnimationForWinningName","open","App","teamMembers","setTeamMembers","setAvailableForQA","setFoundWinner","titleCanChange","setTitleCanChange","id2List","wheelItems","getList","toggleTitleEditable","curTitleEditable","curTeamMembers","curTeamMembersCpy","slice","onDragEnd","result","source","destination","list","startIndex","endIndex","listCpy","splice","removed","reorder","droppableSource","droppableDestination","sourceClone","destClone","move","teamMember","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec8a9367.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './wheel.css';\n\nconst Wheel = ({items, popUpWinningModal, popUpSassyModal, setSelectedForQA}) => {\n    const [selectedItemIdx, setSelectedItemIdx] = useState(undefined);\n    const spinning = useRef('');\n    const numTotalSpins = 5;\n    const selectedName = useRef('');\n\n    const SECONDS_TO_SPIN = 6;\n\n    const reset = () => {\n        spinning.current = ('');\n        popUpWinningModal(selectedName.current);\n    }\n\n    const selectItem = () => {\n        if(items.length < 1){\n            popUpSassyModal();\n            return;\n        }\n        spinning.current = 'spinning';\n        const selectedIdx = Math.floor(Math.random() * items.length);\n        console.log(`selectedIdx: ${selectedIdx}`);\n        setSelectedForQA(items[selectedIdx]);\n        selectedName.current = items[selectedIdx];\n        setSelectedItemIdx(selectedIdx);\n        setTimeout(reset, SECONDS_TO_SPIN * 1000 * 1.001);\n    }\n\n    const wheelVars = {\n        '--nb-item': items.length > 0 ? items.length : 1,\n        '--selected-item': selectedItemIdx,\n        '--nb-turn': numTotalSpins,\n        '--spinning-duration': `${SECONDS_TO_SPIN}s`,\n    };\n\n\n    return (\n        <div className=\"wheel-container\">\n            <div className={`wheel ${spinning.current}`} style={wheelVars} onClick={selectItem}>\n                {items.map((item, index) => (\n                    <div className=\"wheel-item\" key={index} style={{ '--item-nb': index }}>\n                        {item}\n                    </div>\n                ))}\n            </div>\n            <div className=\"buttonContainer\">\n                <button type='button' onClick={selectItem} className='spinItButton'>Spin It!</button>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Wheel;","import React from 'react';\n\nconst EditableWheelItem = ({ value, idx, changeItemContent,functionForEditingList }) => {\n    \n    const changeTheValue = (e) => {\n        changeItemContent(e.target.value, idx,functionForEditingList);\n    }\n\n    return (\n        <input type='text' value={value} onChange={changeTheValue} />\n    );\n}\n\nexport default EditableWheelItem;","import React, { useState } from 'react';\n\nconst ListEditingControls = ({\n    title,\n    listIsEditable,\n    toggleEditableList,\n    addingAnItemToTheList,\n    removingAnItemFromTheList,\n    changeTitle, }) => {\n\n    const [editTitle, setEditTitle] = useState(false);\n\n    const toggleEditTitle = () => {\n        setEditTitle(!editTitle);\n    }\n\n    const titleChangeHandler = (e) => {\n        console.log(`called the changeHandler with ${e.target.value}`);\n        changeTitle(e.target.value);\n    }\n\n    const checkForEnter = (e) => {\n        if (e.keyCode == 13) {\n          toggleEditTitle();\n        }\n      }\n    return (\n        <h2>\n            <span onClick={toggleEditTitle}>\n                {editTitle ?\n                    <input \n                        type='text' \n                        value={title}\n                        onChange={titleChangeHandler}\n                        autoFocus\n                        onBlur={toggleEditTitle}\n                        onKeyDown={checkForEnter}\n                    />\n                    :\n                    title\n                }\n            </span>\n            <button type='button' style={{ display: listIsEditable ? 'none' : '' }} onClick={toggleEditableList}>\n                {listIsEditable ? '' : 'Edit List'}\n            </button>\n            {(listIsEditable === true) &&\n                <div>\n                    <button type='button' onClick={addingAnItemToTheList}>Add Item</button>\n                    <button type='button' onClick={removingAnItemFromTheList}>Remove Item</button>\n                    <button type='button'\n                        onClick={toggleEditableList}\n                        style={{ background: 'skyblue', marginLeft: '15px' }}\n                    >\n                        Done Editing\n                    </button>\n                </div>\n            }\n        </h2>\n    );\n}\n\nexport default ListEditingControls;","import React, { useState } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport './App.css';\nimport EditableWheelItem from './EditableWheelItem';\nimport './ListColumn.css';\nimport ListEditingControls from './ListEditingControls';\n\nconst ListColumn = ({\n    columnTitle,\n    addItemToList,\n    removeItemFromList,\n    allItems,\n    changeItemContent,\n    droppableId,\n    functionForEditingList }) => {\n\n    const [listIsEditable, setListIsEditable] = useState(false);\n    const [title, setTitle] = useState(columnTitle);\n\n    const grid = 8;\n\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        // some basic styles to make the items look a bit nicer\n        userSelect: 'none',\n        padding: grid * 2,\n        margin: `0 0 ${grid}px 0`,\n\n        // change background colour if dragging\n        background: isDragging ? 'aquamarine' : 'turquoise',\n\n        // styles we need to apply on draggables\n        ...draggableStyle\n    });\n\n    const toggleEditableList = () => {\n        setListIsEditable(!listIsEditable);\n    }\n\n    const addingAnItemToTheList = () => {\n        addItemToList(functionForEditingList);\n    }\n\n    const removingAnItemFromTheList = () => {\n        removeItemFromList(functionForEditingList);\n    }\n\n    const getListStyle = isDraggingOver => ({\n        background: isDraggingOver ? 'lightblue' : 'lightgrey',\n        padding: grid,\n        width: 250,\n        overflow: 'hidden',\n        whiteSpace: 'no-wrap',\n        textOverflow: 'ellipsis',\n    });\n\n    const changeTitle = (value) =>{\n        setTitle(value);\n    }\n\n    return (\n        <div className='columnsOfNames'>\n            <ListEditingControls\n                title={title}\n                listIsEditable={listIsEditable}\n                toggleEditableList={toggleEditableList}\n                addingAnItemToTheList={addingAnItemToTheList}\n                removingAnItemFromTheList={removingAnItemFromTheList}\n                changeTitle={changeTitle}\n            />\n            <div>\n                <Droppable droppableId={droppableId}>\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {allItems.map((item, index) => (\n                                listIsEditable ?\n                                    <EditableWheelItem\n                                        key={index}\n                                        value={item.content}\n                                        changeItemContent={changeItemContent}\n                                        idx={index}\n                                        functionForEditingList={functionForEditingList}\n                                    />\n                                    :\n                                    <Draggable\n                                        key={item.id}\n                                        draggableId={item.id}\n                                        index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}>\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </div>\n        </div>\n    );\n}\n\nexport default ListColumn;","import React, { useRef } from 'react'\nimport { useClickOutsideCloser } from './customMainUtils';\n\nconst WinningAnnouncement = ({ availableForQA, foundWinner, closeIt, selectedForQA }) => {\n    const wrapperRef = useRef(null);\n    useClickOutsideCloser(wrapperRef, foundWinner, closeIt);\n    const pickAnimationForWinningName = () => {\n        const allAnimations = [\n            'spinningShimmerIn',\n            'pulsingName',\n            'fireFlashName',\n            'oneLapAndPulse',\n            'crazyJumping',\n            'backgroundFloatPast',\n        ];\n        const winningIdx = Math.floor(Math.random() * allAnimations.length);\n        return allAnimations[winningIdx];\n    }\n    // What was this supposed to do? When would I not want it to be displayed with flex?\n    const flexClass = foundWinner ? 'displayFlex' : '';\n    const animationForWinningName = pickAnimationForWinningName();\n    return (\n        <>\n            {availableForQA.length > 0 ?\n                <dialog\n                    className={`announceTheWinner ${flexClass}`}\n                    open={foundWinner}\n                    onClick={closeIt}\n                    ref={wrapperRef}\n                >\n                    <div className='announce'>The Winner is </div>\n                    <div className={`nameOfWinner ${animationForWinningName}`}>{selectedForQA}</div>\n                </dialog>\n                :\n                <dialog\n                    className={`announceTheWinner ${flexClass}`}\n                    open={foundWinner}\n                    onClick={closeIt}\n                    ref={wrapperRef}\n                >\n                    <div className='sassy-announce'>\n                        Well look at\n            <div className='sassy-nameOfWinner'>CAPTAIN QA</div>\n                        over here!\n            <br />Spinner of Wheels and Finder of Bugs!\n            <br />You spun it, now you've WON it\n          </div>\n                    <div>And while you're at it, please fix my bugs at https://github.com/davidlynch2000/WheelOfQA</div>\n                </dialog>\n            }\n        </>\n    );\n}\nexport default WinningAnnouncement;","import { useEffect } from 'react';\n\nexport const useClickOutsideCloser = (ref, foundWinner, closeIt) => {\n    function handleClickOutside(event) {\n        if (foundWinner && ref.current && !ref.current.contains(event.target)) {\n            closeIt();\n        }\n    }\n    useEffect(() => {\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [foundWinner]);\n};","import React, { useState, useRef } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport './App.css';\nimport Wheel from './wheel';\nimport ListColumn from './ListColumn';\nimport WinningAnnouncement from './WinningAnnouncement';\n\nconst getItems = () => {\n  return [\n    {\n      id: 'Mariam',\n      content: 'Mariam'\n    },\n    {\n      id: 'Josses',\n      content: 'Josses'\n    },\n    {\n      id: 'Jide',\n      content: 'Jide'\n    },\n    {\n      id: 'Kartik',\n      content: 'Kartik'\n    },\n    {\n      id: 'Matt',\n      content: 'Matt'\n    },\n    {\n      id: 'David',\n      content: 'David'\n    },\n    {\n      id: 'Garret',\n      content: 'Garret'\n    },\n    {\n      id: 'Deb',\n      content: 'Deb'\n    },\n    {\n      id: 'Stefania',\n      content: 'Stefania'\n    },\n  ];\n}\n\nconst reorder = (list, startIndex, endIndex) => {\n  const listCpy = list.slice();\n  const [removed] = listCpy.splice(startIndex, 1);\n  listCpy.splice(endIndex, 0, removed);\n  return listCpy;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  // this feels too verbose...\n  const sourceClone = source.slice();\n  const destClone = destination.slice();\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\n\nconst App = () => {\n  const [teamMembers, setTeamMembers] = useState(getItems());\n  const [availableForQA, setAvailableForQA] = useState([]);\n  const [selectedForQA, setSelectedForQA] = useState('');\n  const [foundWinner, setFoundWinner] = useState(false);\n  const [title, setTitle] = useState('Wheel of QA!');\n  const [titleCanChange, setTitleCanChange] = useState(false);\n\n  const closeIt = () => {\n    setFoundWinner(false);\n    setSelectedForQA('');\n  }\n\n  const popUpWinningModal = () => {\n    setFoundWinner(true);\n  }\n\n  const popUpSassyModal = () => {\n    setFoundWinner(true);\n  }\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  const id2List = {\n    wheelItems: availableForQA,\n    allItems: teamMembers,\n  };\n\n  const getList = id => id2List[id];\n\n  const onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    // reordering items in the same list\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      if (source.droppableId === 'allItems') {\n        setTeamMembers(items)\n      }\n      else {\n        setAvailableForQA(items);\n      }\n\n    } else {\n      const result = move(\n        getList(source.droppableId),\n        getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      setAvailableForQA(result.wheelItems);\n      setTeamMembers(result.allItems);\n    }\n  };\n\n  const toggleTitleEditable = () => {\n    setTitleCanChange(curTitleEditable => {\n      return !curTitleEditable;\n    });\n  }\n\n  const checkForEnter = (e) => {\n    if (e.keyCode == 13) {\n      toggleTitleEditable();\n    }\n  }\n\n  const changeTitle = (e) => {\n    setTitle(e.target.value);\n  }\n\n  const changeItemContent = (value, idx, functionForEditingList) => {\n    functionForEditingList(curTeamMembers => {\n      const curTeamMembersCpy = curTeamMembers.slice();\n      curTeamMembersCpy[idx] = { id: value, content: value };\n      return curTeamMembersCpy;\n    });\n  }\n\n  const addItemToList = (functionForEditingList) => {\n    functionForEditingList(curTeamMembers => {\n      return [...curTeamMembers, { id: '', content: '' }]\n    })\n  }\n\n  const removeItemFromList = (functionForEditingList) => {\n    functionForEditingList(curTeamMembers => {\n      let removedCurTeamMembersCpy = curTeamMembers.slice(0, curTeamMembers.length - 1);\n      return removedCurTeamMembersCpy;\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <WinningAnnouncement\n        availableForQA={availableForQA}\n        foundWinner={foundWinner}\n        closeIt={closeIt}\n        selectedForQA={selectedForQA}\n      />\n\n      <div className=\"headerBanner\">\n        {titleCanChange ?\n          <input\n            className='headerBanner'\n            type='text'\n            value={title}\n            onChange={changeTitle}\n            onBlur={toggleTitleEditable}\n            onKeyDown={checkForEnter}\n          />\n          :\n          <h1 onClick={toggleTitleEditable}>{title}</h1>\n        }\n      </div>\n\n      <div className='pageContainer'>\n        <DragDropContext onDragEnd={onDragEnd} className='DAndD'>\n          <ListColumn\n            columnTitle='Team Members'\n            addItemToList={addItemToList}\n            removeItemFromList={removeItemFromList}\n            changeItemContent={changeItemContent}\n            allItems={teamMembers}\n            droppableId='allItems'\n            functionForEditingList={setTeamMembers}\n          />\n\n          <ListColumn\n            columnTitle='Available For QA'\n            addItemToList={addItemToList}\n            removeItemFromList={removeItemFromList}\n            changeItemContent={changeItemContent}\n            allItems={availableForQA}\n            droppableId='wheelItems'\n            functionForEditingList={setAvailableForQA}\n          />\n\n        </DragDropContext>\n\n        <Wheel\n          items={availableForQA.map(teamMember => teamMember.id)}\n          setSelectedForQA={setSelectedForQA}\n          popUpWinningModal={popUpWinningModal}\n          popUpSassyModal={popUpSassyModal}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}