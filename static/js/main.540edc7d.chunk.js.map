{"version":3,"sources":["logo.svg","wheel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wheel","props","useState","undefined","selectedItemIdx","setSelectedItemIdx","spinning","useRef","numTotalSpins","selectedName","reset","current","popUpWinningModal","selectItem","selectedIdx","Math","floor","random","items","length","console","log","setSelectedForQA","setTimeout","SECONDS_TO_SPIN","wheelVars","className","style","onClick","map","item","index","key","type","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","width","App","id","content","teamMembers","setTeamMembers","availableForQA","setAvailableForQA","selectedForQA","foundWinner","setFoundWinner","id2List","droppable","droppable2","getList","flexClass","open","onDragEnd","result","source","destination","droppableId","list","startIndex","endIndex","Array","from","splice","removed","reorder","droppableSource","droppableDestination","sourceClone","destClone","move","provided","snapshot","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","teamMember","winner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.540edc7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from 'react';\nimport './wheel.css';\n\nconst Wheel = (props) => {\n    const [selectedItemIdx, setSelectedItemIdx] = useState(undefined);\n    const spinning = useRef('');\n    const numTotalSpins = useRef(5);\n    const selectedName = useRef('');\n\n    const SECONDS_TO_SPIN = 6;\n\n    const reset = () => {\n        spinning.current = ('');\n        props.popUpWinningModal(selectedName.current);\n    }\n\n    const selectItem = () => {\n        spinning.current = 'spinning';\n        const selectedIdx = Math.floor(Math.random() * props.items.length);\n        console.log(`selectedIdx: ${selectedIdx}`);\n        props.setSelectedForQA(props.items[selectedIdx]);\n        selectedName.current = props.items[selectedIdx];\n        setSelectedItemIdx(selectedIdx);\n        setTimeout(reset, SECONDS_TO_SPIN * 1000 * 1.001);\n    }\n\n    const { items } = props;\n\n    const wheelVars = {\n        '--nb-item': items.length > 0 ? items.length : 1,\n        '--selected-item': selectedItemIdx,\n        '--nb-turn': numTotalSpins.current,\n        '--spinning-duration': `${SECONDS_TO_SPIN}s`,\n    };\n\n\n    return (\n        <div className=\"wheel-container\">\n            <div className={`wheel ${spinning.current}`} style={wheelVars} onClick={selectItem}>\n                {items.map((item, index) => (\n                    <div className=\"wheel-item\" key={index} style={{ '--item-nb': index }}>\n                        {item}\n                    </div>\n                ))}\n            </div>\n            <div className=\"buttonContainer\">\n                <button type='button' onClick={selectItem}>Spin It!</button>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Wheel;","import React, { Component, useState, useRef } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wheel from './wheel';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a> */}\n\n//         found something\n//       </header>\n//     </div>\n//   );\n// }\n\n// fake data generator\n// const getItems = (count, offset = 0) =>\n//     Array.from({ length: count }, (v, k) => k).map(k => ({\n//         id: `item-${k + offset}`,\n//         content: `item ${k + offset}`\n//     }));\n\nconst getItems = () => {\n  return [\n    {\n      id: 'Mariam',\n      content: 'Mariam'\n    },\n    {\n      id: 'Josses',\n      content: 'Josses'\n    },\n    {\n      id: 'Jide',\n      content: 'Jide'\n    },\n    {\n      id: 'Kartik',\n      content: 'Kartik'\n    },\n    {\n      id: 'Matt',\n      content: 'Matt'\n    },\n    {\n      id: 'David',\n      content: 'David'\n    },\n    {\n      id: 'Garret',\n      content: 'Garret'\n    },\n    {\n      id: 'Deb',\n      content: 'Deb'\n    },\n  ];\n}\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? 'lightgreen' : 'grey',\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\n  padding: grid,\n  width: 250\n});\n\n\n\nconst App = () => {\n  const [teamMembers, setTeamMembers] = useState(getItems());\n  const [availableForQA, setAvailableForQA] = useState([]);\n  const [selectedForQA, setSelectedForQA] = useState('');\n  const [foundWinner, setFoundWinner] = useState(false);\n\n\n  const popUpWinningModal = (winner) => {\n    setFoundWinner(true);\n  }\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  const id2List = {\n    droppable: availableForQA,\n    droppable2: teamMembers,\n  };\n\n  const getList = id => id2List[id];\n\n  const onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    // reordering items in the same list\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        getList(source.droppableId),//droppableID2\n        source.index,//\n        destination.index\n      );\n\n      if (source.droppableId === 'droppable2') {\n        setTeamMembers(items)\n      }\n      else {\n        setAvailableForQA(items);\n      }\n\n    } else {\n      const result = move(\n        getList(source.droppableId),\n        getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      setAvailableForQA(result.droppable);\n      setTeamMembers(result.droppable2);\n    }\n  };\n\n\n  const closeIt = () => {\n    setFoundWinner(false);\n  }\n\n  const flexClass = foundWinner ? 'displayFlex': '';\n\n  return (\n    <div className=\"App\">\n\n      <dialog className={`announceTheWinner ${flexClass}`} open={foundWinner} onClick={closeIt}>\n        <div className='announce'>The Winner is </div>\n        <div className='nameOfWinner'>{selectedForQA}</div>\n      </dialog>\n\n      <h1 className='headerBanner'>Wheel of QA!</h1>\n      <div className='pageContainer'>\n        <DragDropContext onDragEnd={onDragEnd} className='DAndD'>\n          <div className='columnsOfNames'>\n            <h2>Team Members</h2>\n            <div>\n              <Droppable droppableId=\"droppable2\">\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={getListStyle(snapshot.isDraggingOver)}>\n                    {teamMembers.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id}\n                        index={index}>\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyle(\n                              snapshot.isDragging,\n                              provided.draggableProps.style\n                            )}>\n                            {item.content}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </div>\n          <div className='columnsOfNames'>\n            <h2>Available for QA</h2>\n            <Droppable droppableId=\"droppable\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}>\n                  {availableForQA.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}>\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}>\n                          {item.content}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </DragDropContext>\n\n\n        <Wheel\n          items={availableForQA.map(teamMember => teamMember.id)}\n          setSelectedForQA={setSelectedForQA}\n          popUpWinningModal={popUpWinningModal}\n        />\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}